from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from sqlalchemy.orm import Session
from database import Base, engine, SessionLocal
import models
from openai import OpenAI
import os

# Tworzymy tabele
Base.metadata.create_all(bind=engine)

app = FastAPI()

# ğŸ”¹ CORS â€“ zezwalamy na frontend z Vercel
origins = [
    "https://lena-frontend.vercel.app",  # produkcja
    "http://localhost:3000"              # dev lokalny
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ğŸ”¹ OpenAI Client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ğŸ”¹ Schemat wiadomoÅ›ci z frontu
class Message(BaseModel):
    user_id: str
    text: str

# ğŸ”¹ DB dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
def root():
    return {"status": "ok", "message": "Lena backend dziaÅ‚a ğŸš€"}

@app.post("/chat")
async def chat(message: Message, db: Session = Depends(get_db)):
    # 1. ZnajdÅº lub utwÃ³rz usera
    user = db.query(models.User).filter(models.User.user_id == message.user_id).first()
    if not user:
        user = models.User(user_id=message.user_id, name=None)
        db.add(user)
        db.commit()
        db.refresh(user)

    # 2. Pobierz historiÄ™ ostatnich 10 wiadomoÅ›ci
    history = (
        db.query(models.Message)
        .filter(models.Message.user_id == user.id)
        .order_by(models.Message.created_at.desc())
        .limit(10)
        .all()
    )
    history = list(reversed(history))

    # 3. Budujemy kontekst rozmowy
    messages = [
        {"role": "system", "content": "JesteÅ› LenÄ…, ciepÅ‚Ä… kobietÄ…, ktÃ³ra pamiÄ™ta uÅ¼ytkownika i jego poprzednie rozmowy."}
    ]
    for h in history:
        role = "user" if h.sender == "user" else "assistant"
        messages.append({"role": role, "content": h.text})

    messages.append({"role": "user", "content": message.text})

    # 4. Zapytanie do OpenAI
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    reply = response.choices[0].message.content

    # 5. Zapisz wiadomoÅ›ci w DB
    user_msg = models.Message(user_id=user.id, text=message.text, sender="user")
    lena_msg = models.Message(user_id=user.id, text=reply, sender="assistant")
    db.add(user_msg)
    db.add(lena_msg)
    db.commit()

    return {"reply": reply}
